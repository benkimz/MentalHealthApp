const elm = {
    byId: (id) => window.document.getElementById(id),
    byTag: (tag) => window.document.getElementsByTagName(tag),
    byClass: (cname) => window.document.getElementsByClassName(cname)
};

const swapClasses = (id, classA, classB) => {
    const target = elm.byId(id);
    if (target && target.classList.contains(classA))
        target.classList.remove(classA);
    if (target && !target.classList.contains(classB))
        target.classList.add(classB);
}

const swapMultipleClasses = (cname, classA, classB) => {
    const nodes = elm.byClass(cname);
    for (let id in nodes) {
        let target = nodes[id];
        if (target && target.DOCUMENT_NODE) {
            if (target && target.classList.contains(classA))
                target.classList.remove(classA);
            if (target && !target.classList.contains(classB))
                target.classList.add(classB);
        }
    }
}

class SoundEffect {
    track = undefined;
    constructor(q) {
        this.track = new Audio(q);
    }
    sonicFeedback() {
        if (this.track) {
            this.track.load();
            this.track.play();
        }
    }
}

window.app = {
    sounds: {
        blockTypeButton: new SoundEffect("assets/sounds/mp3s/pressing_the_block_type_button.mp3"), 
        homeButton: new SoundEffect("assets/sounds/mp3s/pressing_the_home_button.mp3"), 
        backButton: new SoundEffect("assets/sounds/mp3s/pressing_the_back_button.mp3")
    }, 
    theme: {
        light: () => {
            // set cookie to light
            window.BrowserData.SaveCookie("uxt", "radiance", 356 * 120);
        }, 
        dark: () => {
            // set cookie to dark
            window.BrowserData.SaveCookie("uxt", "shadowfall", 356 * 120);
        }, 
        toggle: () => {
            const uxtheme = window.BrowserData.ReadCookie("uxt");
            switch (uxtheme) {
                case "radiance":
                    window.app.theme.dark();
                    break;
                case "shadowfall":
                    window.app.theme.light();
                    break;
                default:
                    window.app.theme.light();
                    break;
            }
        }, 
        render: {
            light: (r) => {
                swapClasses("app-bar", "navbar-dark", "app-bar-light");
                swapClasses("app-bar", "bg-dark", "app-bar-light");

                swapClasses("data-form", "bg-dark", "bg-light");
                swapClasses("uxt", "fa-moon", "fa-sun");
                swapClasses("index-headline", "text-light", "text-dark");
                swapClasses("dom-root", "dark-dom-root", "light-dom-root");
                if (r && r == "dark-menu-items") {
                    swapMultipleClasses("top-menu-item", "~", "dark-nav-item"); 
                    swapClasses("tgl-btn", "text-light", "text-primary");
                    const tgl = elm.byId("top-nav-tgl");
                    if(tgl){
                        tgl.setAttribute("fill", "#000000");
                    } 
                }
                if (r && r == "dark-root") {
                    swapClasses("dom-root", "light-dom-root", "dark-dom-root");
                }
            }, 
            dark: (r) => {
                swapClasses("app-bar", "app-bar-light", "navbar-dark");
                swapClasses("auth-app-bar", "app-bar-light", "navbar-dark");
                swapClasses("interface-app-bar", "navbar-light", "navbar-dark");

                swapClasses("app-bar", "~", "bg-dark");
                swapClasses("auth-app-bar", "~", "bg-dark");
                swapClasses("interface-app-bar", "bg-light", "bg-dark");

                swapClasses("data-form", "bg-light", "bg-dark");
                swapMultipleClasses("frm-control", "bg-light", "bg-dark");
                swapMultipleClasses("frm-label", "~", "dark-label");
                swapMultipleClasses("frm-control", "text-dark", "text-light");
                swapClasses("alt-link", "link-dark", "link-light");
                swapClasses("uxt", "fa-sun", "fa-moon");
                swapClasses("index-headline", "text-dark", "text-light");
                swapClasses("interface-title", "text-dark", "text-light");
                swapClasses("dom-root", "light-dom-root", "dark-dom-root");
            }
        }, 
        initializeAppTheme: (r) => {
            const uxtheme = window.BrowserData.ReadCookie("uxt");
            switch (uxtheme) {
                case "radiance":
                    window.app.theme.render.light(r);
                    break;
                case "shadowfall":
                    window.app.theme.render.dark(r);
                    break;
                default:
                    window.app.theme.render.light(r);
                    break;
            }
        }
    }, 
    frames: {
        location: {
            replace: (id, url) => {
                const target = elm.byId(id);
                try{
                    url = url.replace(/^(\s|\u00A0)+|(\s|\u00A0)+$/g, '').trim();
                    url = (url.length > 0) ? url : "/not-found";
                    target.contentWindow.location.replace(url);
                }catch{
                    return;
                }
            }
        }
    }, 
    time: {
        fromUtcStamp: (stamp) => {
            const now = Math.floor(Date.now() / 1000);
            const secondsElapsed = now - stamp;

            const intervals = [
                { label: 'year', seconds: 31536000 },
                { label: 'month', seconds: 2592000 },
                { label: 'week', seconds: 604800 },
                { label: 'day', seconds: 86400 },
                { label: 'hour', seconds: 3600 },
                { label: 'minute', seconds: 60 },
            ];

            for (let i = 0; i < intervals.length; i++) {
                const interval = intervals[i];
                const elapsed = Math.floor(secondsElapsed / interval.seconds);

                if (elapsed >= 1) {
                return elapsed === 1 ? elapsed + ' ' + interval.label + ' ago' : elapsed + ' ' + interval.label + 's ago';
                }
            }
            return 'Just now';
        }
    }
};

window.BrowserData = {
    SaveCookie: (placeholder, value, expires = 14) => {
        let cdate = new Date(),
            exDate = cdate.setDate(cdate.getDate() + expires),
            exDateString = cdate.toUTCString();
        window.document.cookie = `${placeholder}=${value}; expires=${exDateString}; path=/`;
    },
    ReadCookie: (placeholder) => {
        const name = placeholder + "=";
        const decodedCookie = decodeURIComponent(document.cookie);
        const cookieArray = decodedCookie.split(';');
        for (let i = 0; i < cookieArray.length; i++) {
            let cookie = cookieArray[i].trim();
            if (cookie.indexOf(name) === 0) {
                return cookie.substring(name.length, cookie.length);
            }
        }
        return null;
    },
    DeleteCookie: (placeholder) => {
        window.document.cookie = `${placeholder}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;
    }
};

window.authPages = {
    setTitle: (title) => {
        const target = elm.byId("auth-page-title");
        if (target)
            target.innerText = title;
    }
};

window.contentInterface = {
    setTitle: (title) => {
        const target1 = elm.byId("title-section-1");
        const target2 = elm.byId("title-section-2");
        if (target1 && target2)
            target1.innerText = "How to manage";
        target2.innerText = title;
    }
};